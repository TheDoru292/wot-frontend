import { useSelector } from "react-redux";
import { getAllProfileUrl } from "@/lib/profile";
import Head from "next/head";
import Tweet from "@/components/Tweet";
import LeftSidebar from "@/components/LeftSidebar";
import RightSidebar from "@/components/RightSidebar";
import { format } from "date-fns";
import { useEffect, useState } from "react";
import Link from "next/link";
import { unfollow, follow } from "@/lib/actions";

const backendURL = "http://localhost:3000";

export default function UserProfile({ user }) {
  const [tweets, setTweets] = useState([]);
  const [pageDetails, setPageDetails] = useState({});
  const [following, setFollowing] = useState(user.reqUserFollowing);
  const [followers, setFollowers] = useState(user.followers);
  const [followingHover, setFollowingHover] = useState(false);
  const [openUnfollow, setOpenUnfollow] = useState(false);

  const { userInfo } = useSelector((state) => state.auth);

  useEffect(() => {
    const token = localStorage.getItem("token");

    async function getTweets() {
      const data = await fetch(
        `${backendURL}/api/user/${user.user.handle}/tweets`,
        {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      ).then((res) => res.json());

      setTweets(data.tweets);
      setPageDetails(data.pages);
    }

    getTweets();
  }, []);

  async function showMoreTweets() {
    const token = localStorage.getItem("token");

    const fetchedTweets = await fetch(
      `${backendURL}/api/user/${user.user.handle}/tweets?page=${
        pageDetails.nextPage || 1
      }`,
      {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    ).then((res) => res.json());

    setTweets([...tweets, ...fetchedTweets.tweets]);
    setPageDetails(fetchedTweets.pages);

    console.log(pageDetails);
  }

  async function handleFollow() {
    const data = await follow(user.user.handle);

    if (data.success == true) {
      setFollowers((count) => count + 1);
      setFollowing(true);
    }
  }

  async function handleUnfollow() {
    const data = await unfollow(user.user.handle);

    if (data.success == true) {
      setOpenUnfollow(false);
      setFollowers((count) => count - 1);
      setFollowing(false);
    }
  }

  return (
    <div className="bg-black flex min-h-screen text-gray-200">
      <Head>
        <title>{user.user.username}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <LeftSidebar />
      {openUnfollow == true ? (
        <div className="fixed top-0 left-0 w-screen h-screen z-[1000]">
          <div
            style={{
              boxShadow: "0 0 0 50vmax rgba(91, 112, 131, 0.4)",
              transform: "translate(-50%, -50%)",
            }}
            className="p-7 w-[320px] max-h-[280px] h-full rounded-2xl absolute z-20 left-1/2 top-1/2 flex flex flex-col gap-6 bg-black text-white"
          >
            <div>
              <h2 className="font-bold text-lg">
                Unfollow @{user.user.handle}?
              </h2>
              <p className="text-secondary">
                You will still be able to see their tweets, and you'll be able
                to follow them back.
              </p>
            </div>
            <div className="flex flex-col gap-3">
              <button
                onClick={handleUnfollow}
                className="bg-white text-black py-2 rounded-full font-bold hover:bg-white/90 hover:text-black/90"
              >
                Unfollow
              </button>
              <button
                onClick={() => setOpenUnfollow(false)}
                className="border border-secondary py-2 rounded-full font-bold hover:bg-white/10"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      ) : (
        <></>
      )}
      <main className="flex flex-grow">
        <main className="flex flex-grow flex-col">
          <div
            style={{ backgroundColor: "rgba(0,0,0,0.65)", zIndex: "100" }}
            className="sticky top-[0.1px] backdrop-blur-xl px-4 py-1 flex gap-6"
          >
            <Link href="/" className="flex">
              <div className="flex px-2 rounded-full hover:bg-stone-900">
                <img
                  src="/arrow-left.svg"
                  alt="back"
                  className="self-center w-6 h-6"
                />
              </div>
            </Link>
            <div className="flex flex-col">
              <h2 className="leading-6 text-lg font-bold">
                {user.user.username}
              </h2>
              <p className="text-sm text-secondary">{user.tweets} Tweets</p>
            </div>
          </div>
          <div className="flex flex-col border-b border-gray-700/75">
            <div className="bg-stone-700 w-full h-[200px]">
              <img
                style={{ objectFit: "cover", objectPosition: "25% 25%" }}
                src="https://4kwallpapers.com/images/wallpapers/anime-girl-3840x2160-10025.jpg"
                alt="cover"
                className="w-full h-full overflow-hidden"
              />
            </div>
            <div>
              <img
                src={user.user.profile_picture_url
                  .replace(`"`, "")
                  .replace(",", "")}
                className="bg-red-400 h-[133px] w-[133px] rounded-full absolute top-[182px] ml-5 border-4 border-black"
              ></img>
            </div>
            <div className="px-4 pt-3 flex self-end h-[80px]">
              {user.user._id == userInfo._id ? (
                <button className="font-bold h-9 px-3 border border-secondary rounded-full">
                  Edit profile
                </button>
              ) : following == true ? (
                <button
                  onMouseEnter={() => setFollowingHover(true)}
                  onMouseLeave={() => setFollowingHover(false)}
                  onClick={() => setOpenUnfollow(true)}
                  className="font-bold hover:text-red-600 hover:bg-red-700/20 hover:border-red-600/40 h-9 px-4 rounded-full border border-secondary"
                >
                  {followingHover == true ? (
                    <span>Unfollow</span>
                  ) : (
                    <span>Following</span>
                  )}
                </button>
              ) : (
                <button
                  onClick={handleFollow}
                  className="font-bold h-9 px-4 border bg-white rounded-full text-black"
                >
                  Follow
                </button>
              )}
            </div>
            <div className="flex flex-col gap-2 px-4 mb-4">
              <div>
                <p className="leading-5 font-bold text-lg">
                  {user.user.username}
                </p>
                <p className="text-secondary">@{user.user.handle}</p>
              </div>
              <div>
                <p className="text-secondary">
                  Joined{" "}
                  {format(new Date(user.user.registered_on), "MMMM yyyy")}
                </p>
              </div>
              <div className="flex gap-5">
                <p className="text-sm text-secondary">
                  <span className="text-white font-bold">
                    {user.following}{" "}
                  </span>
                  Following
                </p>
                <p className="text-sm text-secondary">
                  <span className="text-white font-bold">{followers} </span>
                  Follower
                </p>
              </div>
            </div>
            <div className="flex">
              <div className="justify-center hover:bg-zinc-800/75 flex font-bold self-start h-full flex-grow flex-basis">
                <div>
                  <p className="py-[13.2px]">Tweets</p>
                  <div className="h-[4.5px] w-[52px] rounded-full bg-sky-400"></div>
                </div>
              </div>
              <div className=" text-secondary font-bold hover:bg-zinc-800/75 flex justify-center flex-grow flex-basis">
                <p className="py-4">Comments</p>
              </div>
              <div className=" text-secondary font-bold hover:bg-zinc-800/75 flex justify-center flex-grow flex-basis">
                <p className="py-4">Likes</p>
              </div>
            </div>
          </div>
          {tweets.map((item) => {
            return <Tweet key={item._id} tweet={item.tweet} rest={item} />;
          })}
          {pageDetails.hasNextPage == true ? (
            <p onClick={showMoreTweets}>Show more</p>
          ) : (
            <></>
          )}
        </main>
        <RightSidebar />
      </main>
    </div>
  );
}

export async function getStaticPaths() {
  const paths = await getAllProfileUrl();

  return {
    paths,
    fallback: true,
  };
}

export async function getStaticProps({ params }) {
  const user = await fetch(`http://localhost:3000/api/user/${params.id}`, {
    headers: {
      authorization: `Bearer ${process.env.TOKEN}`,
    },
  }).then((res) => res.json());

  return {
    props: {
      user,
    },
  };
}
