import Head from "next/head";
import LeftSidebar from "@/components/LeftSidebar";
import RightSidebar from "@/components/RightSidebar";
import { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { format, formatDistance } from "date-fns";
import { BrowserView, MobileView } from "react-device-detect";
import MobileBottomBar from "@/components/MobileBottomBar";
import MobileUserBar from "@/components/MobileUserBar";

const backendURL = "http://localhost:3000";

export default function Notifications() {
  const [notifications, setNotifications] = useState([]);
  const [filteredNotifications, setFilteredNotifications] = useState([]);
  const [openUserBar, setOpenUserBar] = useState(false);
  const { userInfo } = useSelector((state) => state.auth);

  useEffect(() => {
    async function getNotifcations() {
      const token = localStorage.getItem("token");

      const data = await fetch(
        `${backendURL}/api/user/${userInfo.handle}/notifications`,
        {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      )
        .then((res) => res.json())
        .catch((err) => console.log(err));

      console.log(data);

      setNotifications(data.notifications);
      setFilteredNotifications(data.notifications);
    }

    getNotifcations();
  }, []);

  return (
    <>
      <Head>
        <title>Notifications</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <BrowserView>
        <div className="bg-black flex min-h-screen text-gray-200">
          <LeftSidebar />
          <main className="flex max-w-[575px] flex-grow flex-col">
            <div className="sticky top-[0.1px] flex flex-col backdrop-blur-md">
              <h1 className="py-3 pl-4 text-lg font-bold">Notifications</h1>
            </div>
            <div className="flex flex-col">
              {filteredNotifications.map((item, i) => {
                if (item.action == "comment") {
                  return (
                    <div key={i} className="px-4 py-3 hover:bg-white/5"></div>
                  );
                }
                if (item.action == "follow") {
                  return (
                    <div
                      key={i}
                      className="px-3 py-3 hover:bg-white/5 border-b border-stone-700/75"
                    >
                      <div className="flex gap-3">
                        <img
                          src={item.user.profile_picture_url
                            .replace(`"`, "")
                            .replace(",", "")}
                          alt=""
                          className="w-12 h-12 rounded-full"
                        />
                        <div className="flex flex-col">
                          <p className="font-bold">
                            <span className="hover:underline cursor-pointer">
                              {item.user.username}
                            </span>{" "}
                            <span className="cursor-pointer text-secondary font-normal">
                              @{item.user.handle} {" · "}
                            </span>
                            <span className="text-secondary font-normal">
                              {formatDistance(new Date(item.date), new Date())}
                            </span>
                          </p>
                          <p>
                            <span className="hover:text-sky-500 cursor-pointer">
                              {item.user.username}
                            </span>{" "}
                            is now following you!
                          </p>
                        </div>
                      </div>
                    </div>
                  );
                }
              })}
            </div>
          </main>
          <RightSidebar />
        </div>
      </BrowserView>
      <MobileView className="bg-black min-h-screen text-white flex flex-col max-w-screen">
        {openUserBar ? (
          <MobileUserBar
            openUserBar={openUserBar}
            close={() => {
              setOpenUserBar(false);
            }}
          />
        ) : (
          <></>
        )}
        <div className="sticky top-[0.1px] gap-2 flex items-center px-2 backdrop-blur-md">
          <img
            onClick={(e) => {
              e.stopPropagation();
              setOpenUserBar(true);
            }}
            src={userInfo.profile_picture_url.replace(`"`, "").replace(",", "")}
            className="bg-red-400 w-[30px] h-[30px] rounded-full"
          />
          <h1 className="py-3 text-lg font-bold">Notifications</h1>
        </div>
        <main className="flex flex-grow flex-col">
          {filteredNotifications.map((item, i) => {
            if (item.action == "comment") {
              return <div key={i} className="px-4 py-3 hover:bg-white/5"></div>;
            }
            if (item.action == "follow") {
              return (
                <div
                  key={i}
                  className="px-3 py-3 hover:bg-white/5 border-b border-stone-700/75"
                >
                  <div className="flex gap-3">
                    <img
                      src={item.user.profile_picture_url
                        .replace(`"`, "")
                        .replace(",", "")}
                      alt=""
                      className="w-12 h-12 rounded-full"
                    />
                    <div className="flex flex-col">
                      <p className="font-bold">
                        <span className="hover:underline cursor-pointer">
                          {item.user.username}
                        </span>{" "}
                        <span className="cursor-pointer text-secondary font-normal">
                          @{item.user.handle} {" · "}
                        </span>
                        <span className="text-secondary font-normal">
                          {formatDistance(new Date(item.date), new Date())}
                        </span>
                      </p>
                      <p>
                        <span className="hover:text-sky-500 cursor-pointer">
                          {item.user.username}
                        </span>{" "}
                        is now following you!
                      </p>
                    </div>
                  </div>
                </div>
              );
            }
          })}
        </main>
        <MobileBottomBar />
      </MobileView>
    </>
  );
}
